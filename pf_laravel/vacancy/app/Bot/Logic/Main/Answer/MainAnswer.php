<?php

namespace App\Bot\Logic\Main\Answer;

use App\Bot\Base\BaseAnswer;
use App\Bot\Helpers\DebugTnHelper;
use App\Bot\Logic\Main\Keyboard\MainKeyboard;
use App\Bot\Store\UserState;
use App\Domain\Client\Enums\ClientRoleEnum;
use App\Domain\Client\Repositories\ClientRepository;
use Carbon\Carbon;
use Illuminate\Contracts\Container\BindingResolutionException;
use tsvetkov\telegram_bot\exceptions\BadRequestException;
use tsvetkov\telegram_bot\exceptions\ForbiddenException;
use tsvetkov\telegram_bot\exceptions\InvalidTokenException;

/**
 * Class MainAnswer
 *
 * @package app\bot\core\main\answer
 * @property MainKeyboard $keyboard
 */
class MainAnswer extends BaseAnswer
{
    public function __construct(
        private UserState $userState,
        private MainKeyboard $keyboard,
        private ClientRepository $clientRepository,
    )
    {
    }

    /**
     * –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç! –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –µ—Å–ª–∏ messageText —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, —Ç–æ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω. –£–ß–¢–ò–¢–ï –≠–¢–û!
     *
     * @return void
     * @throws BindingResolutionException
     */
    public function main($question = true)
    {
        if (!$this->userState->user->registered_at) {
            $this->welcome();
        } else {
            $oldAnswer = $this->userState->user->command;
            $this->userState->user->setCommand(['main.main']);
            $this->keyboard->main($this->userState);
            if ($oldAnswer == json_encode(['main.main']) && !$this->keyboard->checkPush($this->userState) && $question) {
                $this->question();
            } else {
                if (!isset($this->userState->message->text) || !$this->keyboard->isPush($this->userState)) {
                    if (!$this->userState->messageText) {
                        $this->userState->textBuilder()->write('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!');
                    }
                    $this->userState->sendMessage();
                }
            }

        }
    }

    public function question()
    {
        $this->keyboard->resetKeyboard($this->userState);
        $client = $this->userState->user;
        $moderators = $this->clientRepository->getByRole(ClientRoleEnum::MODERATOR);
        $this->keyboard->question($this->userState);
        foreach ($moderators as $moderator) {
            try {
                $this->userState->bot->forwardMessage($moderator->telegram_id, $client->telegram_id, $this->userState->message->message_id);
            } catch (BadRequestException|ForbiddenException|InvalidTokenException $e) {
                DebugTnHelper::exception($e);
            }
            if ($this->userState->user->username) {
                $text = '–ù–∏–∫: @' . $this->userState->user->username;
            } else {
                $text = '<a href="tg://user?id=' . $this->userState->user->telegram_id . '">–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥</a>';
            }
            $name = "{$this->userState->user->last_name} {$this->userState->user->first_name} {$this->userState->user->middle_name}";
            $name = trim($name);
            $text .= $name ? PHP_EOL . '–ò–º—è: ' . $name : '';
            $this->userState->textBuilder()->write($text, true);

            $this->userState->user = $moderator;
            $this->userState->sendMessage();
        }
        $this->userState->user = $client;
        $this->keyboard->resetKeyboard($this->userState);
        $this->userState->textBuilder()->write('–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', true);
        $this->userState->sendMessage();

    }
    public function about()
    {
        $this->userState->textBuilder()->write($this->userState->user->tourClub->about);
        $this->userState->sendMessage();
    }

    public function help()
    {
        $this->userState->textBuilder()->write('–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:');
        $this->userState->textBuilder()->writeLn('1. –ó–∞–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start.');
        $this->userState->textBuilder()->writeLn('2. –ù–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å.');
        $this->userState->sendMessage();
    }

    public function welcome()
    {
        $this->userState->user->setCommand(['main.welcome']);
        $this->keyboard->welcome($this->userState);
        $this->userState->textBuilder()->write('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
        if (!$this->userState->user->registered_at) {
            $this->userState->textBuilder()->writeLn('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º');
        }
        $this->userState->sendMessage();
    }

    public function membershipState()
    {
        if (!$this->userState->user->membership) {
            $this->userState->textBuilder()->write('–í –Ω–∞—à–µ–º —Ç—É—Ä–∫–ª—É–±–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–Ω—è—Ç–∏–µ –∫–∞–∫ "—á–ª–µ–Ω—Å—Ç–≤–æ –≤ —Ç—É—Ä–∫–ª—É–±–µ".');
            $this->userState->textBuilder()
                ->writeLn('–í—Å—Ç—É–ø–∏–≤ –≤ —Ç—É—Ä–∫–ª—É–± —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —É—á–µ–±–Ω—ã–µ –ª–µ–∫—Ü–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Ç—É—Ä. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏ —Ç—É—Ä–∫–ª—É–±–∞.');
            $this->userState->textBuilder()
                ->writeLn('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ç—É—Ä–∫–ª—É–± –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ');
            $this->keyboard->membershipState($this->userState);
        } else {
            $this->userState->textBuilder()
                ->write('–ß–ª–µ–Ω—Å—Ç–≤–æ –ø—Ä–æ–¥–ª–µ–Ω–æ –¥–æ ' . $this->userState->user->membership->extended_to->format('d.m.Y'));
        }
        $this->userState->sendMessage();
    }

    public function createMembership()
    {
        $this->userState->user->createMemberShip();
        $this->membershipState();
    }

    public function referralLink()
    {
        $this->userState->textBuilder()
            ->write('Invite your friends and recieve up for every qualified friend 3 TripCoin and increase your chance of winning NFT.')
            ->newLine();
        $invitedClientsCount = count($this->userState->user->invitedClients);
        $this->userState->textBuilder()->p("üë•At the moment you have invited $invitedClientsCount participants.");
        $link = "https://t.me/BeaRexBot?start={$this->userState->user->telegram_id}";
        $this->userState->textBuilder()->write("üñáYour personal link for invitations: $link");
        $this->userState->sendMessage();
    }

    public function sendMessageInit()
    {
        $this->userState->user->setCommand(['main.sendMessage', $this->userState->inlineCommand[1]]);
        $this->userState->inlineMode = false;
        $this->userState->textBuilder()->write('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã');
        $this->userState->sendMessage();
    }

    public function sendMessage()
    {
        $client = $this->clientRepository->one($this->userState->inlineCommand[1]);
        $sender = $this->userState->user;
        $this->userState->user = $client;
        $this->userState->textBuilder()->write($this->userState->message->text);
        $r = $this->userState->sendMessage();
        if (!is_null($r)) {
            $this->userState->user = $sender;
            $this->userState->textBuilder()->write('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', true);
            $this->userState->sendMessage();
            $this->userState->user->setCommand(['main.main']);
        }
    }
}
